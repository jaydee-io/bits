////////////////////////////////////////////////////////////////////////////////
//                                    bits
//
// This file is distributed under the 3-clause Berkeley Software Distribution
// License. See LICENSE for details.
////////////////////////////////////////////////////////////////////////////////
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <cstddef>
#include <span>
#include <array>
#include <vector>
#include <list>

#include <bits/bits_insertion.h>

using ::testing::ElementsAreArray;

template<typename... Ts>
constexpr std::array<std::byte, sizeof...(Ts)> make_array(Ts && ... args) noexcept
{
    return { std::byte(std::forward<Ts>(args))... };
}

TEST(BitsInsertion_CppArray, Unsigned_8bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<uint8_t>(buffer, 0x03, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0x01, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0x7F, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0xDC, 21, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0x0D, 29, 22); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x34, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, Unsigned_16bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<uint16_t>(buffer, 0x0003, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint16_t>(buffer, 0x0001, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint16_t>(buffer, 0x007F, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint16_t>(buffer, 0x3703, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, Unsigned_32bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<uint32_t>(buffer, 0x00000003, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x00000001, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x0000007F, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x00003703, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x017FDC0D, 53, 28); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x35, 0xFF, 0x70, 0x34, 0x00)));
}

TEST(BitsInsertion_CppArray, Unsigned_8bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<uint8_t>(buffer, 0x03, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint8_t>(buffer, 0x01, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint8_t>(buffer, 0x7F, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint8_t>(buffer, 0xDC, 21, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint8_t>(buffer, 0x0D, 29, 22); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x37, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, Unsigned_16bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<uint16_t>(buffer, 0x0003, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint16_t>(buffer, 0x0001, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint16_t>(buffer, 0x007F, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint16_t>(buffer, 0x3703, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, Unsigned_32bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<uint32_t>(buffer, 0x00000003, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x00000001, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x0000007F, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x00003703, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x017FDC0D, 53, 28); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x35, 0xFF, 0x70, 0x37, 0xFF)));
}

TEST(BitsInsertion_CppArray, Unsigned_8bits_with_offset_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<uint8_t>(buffer, 0x03, 37, 34); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0x01, 39, 38); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0x7F, 47, 40); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x7F, 0x00, 0x00)));
    bits::insert<uint8_t>(buffer, 0xDC, 55, 48); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x7F, 0xDC, 0x00)));
    bits::insert<uint8_t>(buffer, 0x0D, 63, 56); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, Unsigned_16bits_with_offset_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<uint16_t>(buffer, 0x0003, 39, 36); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00)));
    bits::insert<uint16_t>(buffer, 0x0001, 41, 40); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00)));
    bits::insert<uint16_t>(buffer, 0x007F, 49, 42); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x5F, 0xC0, 0x00)));
    bits::insert<uint16_t>(buffer, 0x3703, 63, 50); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x5F, 0xF7, 0x03)));
}

TEST(BitsInsertion_CppArray, Unsigned_32bits_with_offset_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<uint32_t>(buffer, 0x00000003, 13, 10); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x00000001, 15, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x0000007F, 23, 16); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x00003703, 37, 24); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x7F, 0xDC, 0x0C, 0x00, 0x00, 0x00)));
    bits::insert<uint32_t>(buffer, 0x017FDC0D, 63, 38); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x7F, 0xDC, 0x0D, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, Unsigned_8bits_with_offset_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<uint8_t>(buffer, 0x03, 37, 34); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0XFF)));
    bits::insert<uint8_t>(buffer, 0x01, 39, 38); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0xFF, 0xFF, 0XFF)));
    bits::insert<uint8_t>(buffer, 0x7F, 47, 40); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0x7F, 0xFF, 0XFF)));
    bits::insert<uint8_t>(buffer, 0xDC, 55, 48); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0x7F, 0xDC, 0XFF)));
    bits::insert<uint8_t>(buffer, 0x0D, 63, 56); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, Unsigned_16bits_with_offset_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<uint16_t>(buffer, 0x0003, 39, 36); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint16_t>(buffer, 0x0001, 41, 40); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x7F, 0xFF, 0xFF)));
    bits::insert<uint16_t>(buffer, 0x007F, 49, 42); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x5F, 0xFF, 0xFF)));
    bits::insert<uint16_t>(buffer, 0x3703, 63, 50); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x5F, 0xF7, 0x03)));
}

TEST(BitsInsertion_CppArray, Unsigned_32bits_with_offset_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<uint32_t>(buffer, 0x00000003, 13, 10); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x00000001, 15, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x0000007F, 23, 16); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x00003703, 37, 24); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0x7F, 0xDC, 0x0F, 0xFF, 0xFF, 0xFF)));
    bits::insert<uint32_t>(buffer, 0x017FDC0D, 63, 38); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0x7F, 0xDC, 0x0D, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, Signed_8bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<int8_t>(buffer,   -3, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int8_t>(buffer,   -1, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int8_t>(buffer,   63, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int8_t>(buffer, -113, 21, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int8_t>(buffer,  115, 29, 22); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCC, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, Signed_16bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<int16_t>(buffer,    -3, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int16_t>(buffer,    -1, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int16_t>(buffer,    63, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int16_t>(buffer, -7204, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xC0, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, Signed_32bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<int32_t>(buffer,      -3, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int32_t>(buffer,      -1, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int32_t>(buffer,      63, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int32_t>(buffer,   -7204, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xC0, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<int32_t>(buffer, -573553, 53, 28); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xFF, 0xDC, 0xFE, 0x3C, 0x00)));
}

TEST(BitsInsertion_CppArray, Signed_8bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<int8_t>(buffer,   -3, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int8_t>(buffer,   -1, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int8_t>(buffer,   63, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int8_t>(buffer, -113, 21, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int8_t>(buffer,  115, 29, 22); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, Signed_16bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<int16_t>(buffer,    -3, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int16_t>(buffer,    -1, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int16_t>(buffer,    63, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int16_t>(buffer, -7204, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, Signed_32bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<int32_t>(buffer,      -3, 3,  0 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int32_t>(buffer,      -1, 5,  4 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int32_t>(buffer,      63, 13, 6 ); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int32_t>(buffer,   -7204, 27, 14); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<int32_t>(buffer, -573553, 53, 28); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xFF, 0xDC, 0xFE, 0x3F, 0xFF)));
}

TEST(BitsInsertion_CppArray, Ranges)
{
    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        uint8_t c_array[3] = { 0x5F, 0xF7, 0x03 };
        bits::insert(buffer, c_array, 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x5F, 0xF7, 0x03 };
        bits::insert(buffer, std_array, 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x5F, 0xF7, 0x03 };
        std::span<uint8_t, 3> std_span(std_array);
        bits::insert(buffer, std_span, 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::vector<uint8_t> std_vector = { 0x5F, 0xF7, 0x03 };
        bits::insert(buffer, std_vector, 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::list<uint8_t> std_list = { 0x5F, 0xF7, 0x03 };
        bits::insert(buffer, std_list, 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }
}

TEST(BitsInsertion_CppArray, Ranges_Subranges)
{
    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        uint8_t c_array[6] = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(c_array)), std::ranges::next(std::ranges::begin(c_array), 4)), 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 6> std_array = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_array)), std::ranges::next(std::ranges::begin(std_array), 4)), 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 6> std_array = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        std::span<uint8_t, 6> std_span(std_array);
        bits::insert(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_span)), std::ranges::next(std::ranges::begin(std_span), 4)), 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::vector<uint8_t> std_vector = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_vector)), std::ranges::next(std::ranges::begin(std_vector), 4)), 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::list<uint8_t> std_list = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_list)), std::ranges::next(std::ranges::begin(std_list), 4)), 27, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }
}

TEST(BitsInsertion_CppArray, Ranges_Small_Values)
{
    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        uint8_t c_array[3] = { 0x05, 0x07, 0x03 };
        bits::insert(buffer, c_array, 15, 4, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x05, 0x07, 0x03 };
        bits::insert(buffer, std_array, 15, 4, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x05, 0x07, 0x03 };
        std::span<uint8_t, 3> std_span(std_array);
        bits::insert(buffer, std_span, 15, 4, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::vector<uint8_t> std_vector = { 0x05, 0x07, 0x03 };
        bits::insert(buffer, std_vector, 15, 4, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::list<uint8_t> std_list = { 0x05, 0x07, 0x03 };
        bits::insert(buffer, std_list, 15, 4, 4);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }
}

//-----------------------------------------------------------------------------
//- Tests for templated bits position
//-----------------------------------------------------------------------------

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_8bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<3,  0,  uint8_t>(buffer, 0x03); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<5,  4,  uint8_t>(buffer, 0x01); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<13, 6,  uint8_t>(buffer, 0x7F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<21, 14, uint8_t>(buffer, 0xDC); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<29, 22, uint8_t>(buffer, 0x0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x34, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_16bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<3,  0,  uint16_t>(buffer, 0x0003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<5,  4,  uint16_t>(buffer, 0x0001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<13, 6,  uint16_t>(buffer, 0x007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<27, 14, uint16_t>(buffer, 0x3703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_32bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<3,  0,  uint32_t>(buffer, 0x00000003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<5,  4,  uint32_t>(buffer, 0x00000001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<13, 6,  uint32_t>(buffer, 0x0000007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<27, 14, uint32_t>(buffer, 0x00003703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<53, 28, uint32_t>(buffer, 0x017FDC0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x35, 0xFF, 0x70, 0x34, 0x00)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_8bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<3,  0,  uint8_t>(buffer, 0x03); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<5,  4,  uint8_t>(buffer, 0x01); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<13, 6,  uint8_t>(buffer, 0x7F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<21, 14, uint8_t>(buffer, 0xDC); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<29, 22, uint8_t>(buffer, 0x0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x37, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_16bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<3,  0,  uint16_t>(buffer, 0x0003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<5,  4,  uint16_t>(buffer, 0x0001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<13, 6,  uint16_t>(buffer, 0x007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<27, 14, uint16_t>(buffer, 0x3703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_32bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<3,  0,  uint32_t>(buffer, 0x00000003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<5,  4,  uint32_t>(buffer, 0x00000001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<13, 6,  uint32_t>(buffer, 0x0000007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<27, 14, uint32_t>(buffer, 0x00003703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<53, 28, uint32_t>(buffer, 0x017FDC0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x35, 0xFF, 0x70, 0x35, 0xFF, 0x70, 0x37, 0xFF)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_8bits_with_offset_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<37, 34, uint8_t>(buffer, 0x03); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00)));
    bits::insert<39, 38, uint8_t>(buffer, 0x01); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00)));
    bits::insert<47, 40, uint8_t>(buffer, 0x7F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x7F, 0x00, 0x00)));
    bits::insert<55, 48, uint8_t>(buffer, 0xDC); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x7F, 0xDC, 0x00)));
    bits::insert<63, 56, uint8_t>(buffer, 0x0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x0D, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_16bits_with_offset_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<39, 36, uint16_t>(buffer, 0x0003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00)));
    bits::insert<41, 40, uint16_t>(buffer, 0x0001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00)));
    bits::insert<49, 42, uint16_t>(buffer, 0x007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x5F, 0xC0, 0x00)));
    bits::insert<63, 50, uint16_t>(buffer, 0x3703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x00, 0x00, 0x00, 0x03, 0x5F, 0xF7, 0x03)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_32bits_with_offset_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<13, 10, uint32_t>(buffer, 0x00000003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<15, 14, uint32_t>(buffer, 0x00000001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<23, 16, uint32_t>(buffer, 0x0000007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<37, 24, uint32_t>(buffer, 0x00003703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x7F, 0xDC, 0x0C, 0x00, 0x00, 0x00)));
    bits::insert<63, 38, uint32_t>(buffer, 0x017FDC0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0x00, 0x0D, 0x7F, 0xDC, 0x0D, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_8bits_with_offset_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<37, 34, uint8_t>(buffer, 0x03); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0XFF)));
    bits::insert<39, 38, uint8_t>(buffer, 0x01); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0xFF, 0xFF, 0XFF)));
    bits::insert<47, 40, uint8_t>(buffer, 0x7F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0x7F, 0xFF, 0XFF)));
    bits::insert<55, 48, uint8_t>(buffer, 0xDC); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0x7F, 0xDC, 0XFF)));
    bits::insert<63, 56, uint8_t>(buffer, 0x0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xCD, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_16bits_with_offset_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<39, 36, uint16_t>(buffer, 0x0003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF)));
    bits::insert<41, 40, uint16_t>(buffer, 0x0001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x7F, 0xFF, 0xFF)));
    bits::insert<49, 42, uint16_t>(buffer, 0x007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x5F, 0xFF, 0xFF)));
    bits::insert<63, 50, uint16_t>(buffer, 0x3703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x5F, 0xF7, 0x03)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Unsigned_32bits_with_offset_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<13, 10, uint32_t>(buffer, 0x00000003); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<15, 14, uint32_t>(buffer, 0x00000001); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<23, 16, uint32_t>(buffer, 0x0000007F); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<37, 24, uint32_t>(buffer, 0x00003703); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0x7F, 0xDC, 0x0F, 0xFF, 0xFF, 0xFF)));
    bits::insert<63, 38, uint32_t>(buffer, 0x017FDC0D); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xFF, 0xCD, 0x7F, 0xDC, 0x0D, 0x7F, 0xDC, 0x0D)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Signed_8bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<3,  0,  int8_t>(buffer,   -3); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<5,  4,  int8_t>(buffer,   -1); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<13, 6,  int8_t>(buffer,   63); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<21, 14, int8_t>(buffer, -113); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<29, 22, int8_t>(buffer,  115); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCC, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Signed_16bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<3,  0,  int16_t>(buffer,    -3); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<5,  4,  int16_t>(buffer,    -1); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<13, 6,  int16_t>(buffer,    63); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<27, 14, int16_t>(buffer, -7204); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xC0, 0x00, 0x00, 0x00, 0x00)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Signed_32bits_empty_buffer)
{
    auto buffer = make_array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    bits::insert<3,  0,  int32_t>(buffer,      -3); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<5,  4,  int32_t>(buffer,      -1); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<13, 6,  int32_t>(buffer,      63); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<27, 14, int32_t>(buffer,   -7204); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xC0, 0x00, 0x00, 0x00, 0x00)));
    bits::insert<53, 28, int32_t>(buffer, -573553); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xFF, 0xDC, 0xFE, 0x3C, 0x00)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Signed_8bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<3,  0,  int8_t>(buffer,   -3); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<5,  4,  int8_t>(buffer,   -1); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<13, 6,  int8_t>(buffer,   63); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<21, 14, int8_t>(buffer, -113); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<29, 22, int8_t>(buffer,  115); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Signed_16bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<3,  0,  int16_t>(buffer,    -3); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<5,  4,  int16_t>(buffer,    -1); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<13, 6,  int16_t>(buffer,    63); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<27, 14, int16_t>(buffer, -7204); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Signed_32bits_no_empty_buffer)
{
    auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

    bits::insert<3,  0,  int32_t>(buffer,      -3); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<5,  4,  int32_t>(buffer,      -1); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<13, 6,  int32_t>(buffer,      63); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<27, 14, int32_t>(buffer,   -7204); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF)));
    bits::insert<53, 28, int32_t>(buffer, -573553); ASSERT_THAT(buffer, ElementsAreArray(make_array(0xDC, 0xFE, 0x3D, 0xFF, 0xDC, 0xFE, 0x3F, 0xFF)));
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Ranges)
{
    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        uint8_t c_array[3] = { 0x5F, 0xF7, 0x03 };
        bits::insert<27, 4>(buffer, c_array);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x5F, 0xF7, 0x03 };
        bits::insert<27, 4>(buffer, std_array);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x5F, 0xF7, 0x03 };
        std::span<uint8_t, 3> std_span(std_array);
        bits::insert<27, 4>(buffer, std_span);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::vector<uint8_t> std_vector = { 0x5F, 0xF7, 0x03 };
        bits::insert<27, 4>(buffer, std_vector);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::list<uint8_t> std_list = { 0x5F, 0xF7, 0x03 };
        bits::insert<27, 4>(buffer, std_list);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Ranges_Subranges)
{
    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        uint8_t c_array[6] = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert<27, 4>(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(c_array)), std::ranges::next(std::ranges::begin(c_array), 4)));
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 6> std_array = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert<27, 4>(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_array)), std::ranges::next(std::ranges::begin(std_array), 4)));
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 6> std_array = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        std::span<uint8_t, 6> std_span(std_array);
        bits::insert<27, 4>(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_span)), std::ranges::next(std::ranges::begin(std_span), 4)));
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::vector<uint8_t> std_vector = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert<27, 4>(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_vector)), std::ranges::next(std::ranges::begin(std_vector), 4)));
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::list<uint8_t> std_list = { 0x00, 0x5F, 0xF7, 0x03, 0x00, 0x00 };
        bits::insert<27, 4>(buffer, std::ranges::subrange(std::ranges::next(std::ranges::begin(std_list)), std::ranges::next(std::ranges::begin(std_list), 4)));
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0xFF, 0x70, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF)));
    }
}

TEST(BitsInsertion_CppArray, TemplatedPosition_Ranges_Small_Values)
{
    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        uint8_t c_array[3] = { 0x05, 0x07, 0x03 };
        bits::insert<15, 4, 4>(buffer, c_array);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x05, 0x07, 0x03 };
        bits::insert<15, 4, 4>(buffer, std_array);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::array<uint8_t, 3> std_array = { 0x05, 0x07, 0x03 };
        std::span<uint8_t, 3> std_span(std_array);
        bits::insert<15, 4, 4>(buffer, std_span);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::vector<uint8_t> std_vector = { 0x05, 0x07, 0x03 };
        bits::insert<15, 4, 4>(buffer, std_vector);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }

    {
        auto buffer = make_array(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
        std::list<uint8_t> std_list = { 0x05, 0x07, 0x03 };
        bits::insert<15, 4, 4>(buffer, std_list);
        ASSERT_THAT(buffer, ElementsAreArray(make_array(0xF5, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF)));
    }
}